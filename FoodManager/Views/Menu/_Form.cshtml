@model FoodManager.Models.Menu
@using FoodManager.Infrastructure.Enums
@using FoodManager.Infrastructure.Extensions
@using FoodManager.Infrastructure.Resolvers
@using FoodManager.Models.BaseResponses
@Html.HiddenFor(m => m.Id)
@{
    var maxValueType = new MealType().RetrieveMaxValue();
    var minValueType = new MealType().RetrieveMinValue();
    var widthToTypeButton = ((double)100 / maxValueType);
    var types = new MealType().ConvertToCollection();
    
    var maxValueDayWeek = new DayWeekName().RetrieveMaxValue();
    var widthToDayWeekButton = ((double)100 / (maxValueDayWeek + 1));
    var dayWeekNames = new DayWeekName().ConvertToCollection();
    
    var saucerTypes = new SaucerType().ConvertToCollection();
    var optgroups = saucerTypes.Select(saucerType => new Enumerator { Value = saucerType.Value, Name = EnumResolver.Saucer(saucerType.Value) });
}

<div class="form-group">
    @Html.LabelFor(m => m.MealType, "Comida", new { @class = "col-lg-2 control-label" })
    <div class="col-md-6 input-group types-form">
        <div class="btn-group btn-block" data-toggle="buttons">
            @foreach (var type in types.Where(mealType => mealType.Value.IsGreaterThanZero()))
            {
                var isActive = ((Model.MealType.GetValue().IsEqualTo(type.Value)) || (minValueType.IsEqualTo(type.Value) && Model.Id.IsEqualToZero() && Model.MealType.GetValue().IsEqualToZero()))? "active" : "";
                var isChecked = ((Model.MealType.GetValue().IsEqualTo(type.Value))|| (minValueType.IsEqualTo(type.Value) && Model.Id.IsEqualToZero() && Model.MealType.GetValue().IsEqualToZero())) ? "checked" : "";
                <label class="btn btn-default @isActive" style="width: @widthToTypeButton%">
                    <input id="Type" type="radio" name="MealType" data-role="none" value="@type.Value" class="Type" @isChecked>
                    @EnumResolver.Meal(type.Value)
                </label>
            }
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="TypeMessage"></span>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.DayWeek, "Día", new { @class = "col-lg-2 control-label" })
    <div class="col-md-6 input-group types-form">
        <div class="btn-group btn-block" data-toggle="buttons">
            @foreach (var dayWeek in dayWeekNames)
            {
                var isActive = Model.DayWeek.GetValue().IsEqualTo(dayWeek.Value) ? "active" : "";
                var isChecked = Model.DayWeek.GetValue().IsEqualTo(dayWeek.Value) ? "checked" : "";
                <label class="btn btn-default @isActive" style="width: @widthToDayWeekButton%">
                    <input type="radio" name="DayWeek" data-role="none" value="@dayWeek.Value" id="DayWeek" @isChecked>
                    @EnumResolver.DayWeek(dayWeek.Value)
                </label>
            }
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="TypeMessage"></span>
</div>

<div class="form-group selectize-container">
    @Html.LabelFor(m => m.DealerId, "Concesionario", new { @class = "col-lg-2 control-label" })
    <div class="col-md-6 input-group required-field-block">
        <span class="input-group-addon"><i class="fa fa-spoon"></i></span>
        @{ var dealers = new List<SelectListItem> {new SelectListItem {Value = Model.Dealer.Id.ConvertToString(), Text = Model.Dealer.Name}}; }
        @Html.DropDownListFor(m => m.DealerId, dealers, new
        {
            id = "DealerId",
            @class = "form-control",
            data_role = "none",
            data_entity = EntityType.Dealer
        })
        <div class="required-icon iconPointer">
            <div class="text">*</div>
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="DealerIdMessage"></span>
</div>

<div class="form-group selectize-container">
    @Html.LabelFor(m => m.SaucerId, "Platillo", new { @class = "col-lg-2 control-label" })
    <div class="col-md-6 input-group required-field-block">
        <span class="input-group-addon"><i class="fa fa-cutlery"></i></span>
        @{ var saucers = new List<SelectListItem> { new SelectListItem { Value = Model.Saucer.Id.ConvertToString(), Text = Model.Saucer.Name } }; }
        @Html.DropDownListFor(m => m.SaucerId, saucers, new
        {
            id = "SaucerId",
            @class = "form-control",
            data_role = "none",
            data_entity = EntityType.Saucer,
            data_groups = Json.Encode(optgroups)
        })
        <div class="required-icon iconPointer">
            <div class="text">*</div>
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="SaucerIdMessage"></span>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.StartDate, "Fecha inicio", new { @class = "col-lg-2 control-label" })
    <div class="col-md-3 input-group required-field-block">
        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
        @Html.TextBoxFor(m => m.StartDate, new
        {
            @class = "form-control",
            data_role = "none",
            placeholder = "dd/mm/aaaa",
            id = "StartDate",
            maxlength = "10",
            Autocomplete = "off"
        })
        <div class="required-icon iconPointer">
            <div class="text">*</div>
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="StartDateMessage"></span>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.EndDate, "Fecha fin", new { @class = "col-lg-2 control-label" })
    <div class="col-md-3 input-group required-field-block">
        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
        @Html.TextBoxFor(m => m.EndDate, new
        {
            @class = "form-control",
            data_role = "none",
            placeholder = "dd/mm/aaaa",
            id = "EndDate",
            maxlength = "10",
            Autocomplete = "off"
        })
        <div class="required-icon iconPointer">
            <div class="text">*</div>
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="EndDateMessage"></span>
</div>

<div class="form-group hidden">
    @Html.LabelFor(m => m.MaxAmount, "Cantidad", new { @class = "col-lg-2 control-label" })
    <div class="col-md-3 touchspinCustom">
        @Html.TextBoxFor(m => m.MaxAmount, new
        {
            @class = "form-control touchSpin",
            placeholder = "0",
            id = "MaxAmount",
            value = "0",
            maxlength = "5",
            Autocomplete = "off"
        })
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="MaxAmountMessage"></span>
</div>

<div class="form-group">
    @Html.LabelFor(m => m.Comment, "Comentario", new { @class = "col-lg-2 control-label" })
    <div class="col-md-6 input-group required-field-block">
        <span class="input-group-addon"><i class="fa fa-comments"></i></span>
        @Html.TextAreaFor(m => m.Comment, new
        {
            @class = "form-control",
            data_role = "none",
            placeholder = "Escriba su comentario...",
            id = "Comment",
            maxlength = "250",
            Autocomplete = "off",
            rows = 3,
            @style = "resize: none; overflow-y: scroll;max-height: 90px;"
        })
        <div class="required-icon iconPointer">
            <div class="text">*</div>
        </div>
    </div>
    <span class="col-lg-2 control-label clearSpan"></span>
    <span class="col-lg-6 validateCustom" id="CommentMessage"></span>
</div>